{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ObserveRTC \u00b6 ObserveRTC is an open source initiative aimed to provide tools to collect, interpret, and visualize WebRTC metrics in real-time. Benefits of collecting WebRTC stats \u00b6 Performance tuning - Ability to debug/improve your WebRTC applications. Regression analysis - Quantify the impact of changes you made. System operations - Measure and monitor the performance of your application. Troubleshooting & debugging - Investigate technical issues. Usage trends - Track/Undetstand how your app is used. Use cases \u00b6 As an application developer you can use ObserveRTC to debug your WebRTC applications. As a product owner you can use ObserveRTC to measure and monitor the performance of your application. As an operations team member you can monitor the health and get critical alerts about your application. Why to choose ObserveRTC? \u00b6 Open source and designed to be integrated with other open-source solutions. Own the data from your applications and run further analysis. Designed for the cloud. When the size of your memory and compute requirements increase, new resources can be dynamically added to your cluster to scale elastically. e.g. hazelcast as an in-memory distributed databse for resiliance.","title":"Home"},{"location":"#observertc","text":"ObserveRTC is an open source initiative aimed to provide tools to collect, interpret, and visualize WebRTC metrics in real-time.","title":"ObserveRTC"},{"location":"#benefits-of-collecting-webrtc-stats","text":"Performance tuning - Ability to debug/improve your WebRTC applications. Regression analysis - Quantify the impact of changes you made. System operations - Measure and monitor the performance of your application. Troubleshooting & debugging - Investigate technical issues. Usage trends - Track/Undetstand how your app is used.","title":"Benefits of collecting WebRTC stats"},{"location":"#use-cases","text":"As an application developer you can use ObserveRTC to debug your WebRTC applications. As a product owner you can use ObserveRTC to measure and monitor the performance of your application. As an operations team member you can monitor the health and get critical alerts about your application.","title":"Use cases"},{"location":"#why-to-choose-observertc","text":"Open source and designed to be integrated with other open-source solutions. Own the data from your applications and run further analysis. Designed for the cloud. When the size of your memory and compute requirements increase, new resources can be dynamically added to your cluster to scale elastically. e.g. hazelcast as an in-memory distributed databse for resiliance.","title":"Why to choose ObserveRTC?"},{"location":"quick-start/step-1-observer-js-integrations/","text":"Stats Collection for Jitsi \u00b6 Stats Collection for TokBox \u00b6","title":"Step 1 Include client libraries"},{"location":"quick-start/step-1-observer-js-integrations/#stats-collection-for-jitsi","text":"","title":"Stats Collection for Jitsi"},{"location":"quick-start/step-1-observer-js-integrations/#stats-collection-for-tokbox","text":"","title":"Stats Collection for TokBox"},{"location":"quick-start/step-2-observer/","text":"Stats Interpretation (Docker) \u00b6 Pre-Requisites \u00b6 install docker-compose https://docs.docker.com/compose/install/ If you want to customize any Kafka parameters, simply add them as environment variables in docker-compose.yml. Kafka's log4j usage can be customized by adding environment variables prefixed with LOG4J_. Usage \u00b6 In order to quickly run WebRTC-Observer on a host running Docker and Docker Compose, follow these steps: Clone this repository git clone https://github.com/ObserveRTC/docker-webrtc-observer.git Run docker-compose up Hazelcast configuration \u00b6 The Observer uses hazelcast as an IMDG, and all the configuration related to hazelcast is in hazelcast-config.yml, which is automatically mounted in the docker when you run it.","title":"Step 2 Deploy observer"},{"location":"quick-start/step-2-observer/#stats-interpretation-docker","text":"","title":"Stats Interpretation (Docker)"},{"location":"quick-start/step-2-observer/#pre-requisites","text":"install docker-compose https://docs.docker.com/compose/install/ If you want to customize any Kafka parameters, simply add them as environment variables in docker-compose.yml. Kafka's log4j usage can be customized by adding environment variables prefixed with LOG4J_.","title":"Pre-Requisites"},{"location":"quick-start/step-2-observer/#usage","text":"In order to quickly run WebRTC-Observer on a host running Docker and Docker Compose, follow these steps: Clone this repository git clone https://github.com/ObserveRTC/docker-webrtc-observer.git Run docker-compose up","title":"Usage"},{"location":"quick-start/step-2-observer/#hazelcast-configuration","text":"The Observer uses hazelcast as an IMDG, and all the configuration related to hazelcast is in hazelcast-config.yml, which is automatically mounted in the docker when you run it.","title":"Hazelcast configuration"},{"location":"quick-start/step-3-observer-connector/","text":"Stats Connector \u00b6","title":"Step 3 Deploy observer-connector"},{"location":"quick-start/step-3-observer-connector/#stats-connector","text":"","title":"Stats Connector"},{"location":"quick-start/step-4-observer-visualiser/","text":"Stats Visualisation \u00b6","title":"Step 4 Visualise"},{"location":"quick-start/step-4-observer-visualiser/#stats-visualisation","text":"","title":"Stats Visualisation"},{"location":"team/team/","text":"ObserveRTC Team \u00b6 Balazs Kreith \u00b6 Balazs Kreith is an open source developer and software architect. Binoy Chemmagate \u00b6 Binoy Chemmagate is an RTC product manager and tech enthusiast. Chad Hart \u00b6 Chad Hart is an RTC consultant and tech enthusiast. Pallab Gain \u00b6 Pallab Gain is an open source developer and software architect.","title":"Members"},{"location":"team/team/#observertc-team","text":"","title":"ObserveRTC Team"},{"location":"team/team/#balazs-kreith","text":"Balazs Kreith is an open source developer and software architect.","title":"Balazs Kreith"},{"location":"team/team/#binoy-chemmagate","text":"Binoy Chemmagate is an RTC product manager and tech enthusiast.","title":"Binoy Chemmagate"},{"location":"team/team/#chad-hart","text":"Chad Hart is an RTC consultant and tech enthusiast.","title":"Chad Hart"},{"location":"team/team/#pallab-gain","text":"Pallab Gain is an open source developer and software architect.","title":"Pallab Gain"}]}